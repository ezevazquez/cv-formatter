[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "LETTER",
        "importPath": "reportlab.lib.pagesizes",
        "description": "reportlab.lib.pagesizes",
        "isExtraImport": true,
        "detail": "reportlab.lib.pagesizes",
        "documentation": {}
    },
    {
        "label": "SimpleDocTemplate",
        "importPath": "reportlab.platypus",
        "description": "reportlab.platypus",
        "isExtraImport": true,
        "detail": "reportlab.platypus",
        "documentation": {}
    },
    {
        "label": "Paragraph",
        "importPath": "reportlab.platypus",
        "description": "reportlab.platypus",
        "isExtraImport": true,
        "detail": "reportlab.platypus",
        "documentation": {}
    },
    {
        "label": "Spacer",
        "importPath": "reportlab.platypus",
        "description": "reportlab.platypus",
        "isExtraImport": true,
        "detail": "reportlab.platypus",
        "documentation": {}
    },
    {
        "label": "getSampleStyleSheet",
        "importPath": "reportlab.lib.styles",
        "description": "reportlab.lib.styles",
        "isExtraImport": true,
        "detail": "reportlab.lib.styles",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "fitz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fitz",
        "description": "fitz",
        "detail": "fitz",
        "documentation": {}
    },
    {
        "label": "pytesseract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytesseract",
        "description": "pytesseract",
        "detail": "pytesseract",
        "documentation": {}
    },
    {
        "label": "convert_from_bytes",
        "importPath": "pdf2image",
        "description": "pdf2image",
        "isExtraImport": true,
        "detail": "pdf2image",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "upload_cv",
        "importPath": "cvapp.views",
        "description": "cvapp.views",
        "isExtraImport": true,
        "detail": "cvapp.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "clean_json_block",
        "kind": 2,
        "importPath": "cvapp.utils.openai_client",
        "description": "cvapp.utils.openai_client",
        "peekOfCode": "def clean_json_block(raw):\n    \"\"\"\n    Elimina los bloques tipo ```json ... ``` y deja solo el JSON.\n    \"\"\"\n    cleaned = re.sub(r\"^```json\", \"\", raw.strip())\n    cleaned = re.sub(r\"```$\", \"\", cleaned.strip())\n    return cleaned.strip()\ndef structure_cv(raw_text):\n    try:\n        completion = client.chat.completions.create(",
        "detail": "cvapp.utils.openai_client",
        "documentation": {}
    },
    {
        "label": "structure_cv",
        "kind": 2,
        "importPath": "cvapp.utils.openai_client",
        "description": "cvapp.utils.openai_client",
        "peekOfCode": "def structure_cv(raw_text):\n    try:\n        completion = client.chat.completions.create(\n            extra_headers={\n                \"HTTP-Referer\": \"http://localhost:8000\",\n                \"X-Title\": \"Revolt CV App\",\n            },\n            model=\"openai/gpt-4o\",\n            max_tokens=1000,\n            messages=[",
        "detail": "cvapp.utils.openai_client",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "cvapp.utils.openai_client",
        "description": "cvapp.utils.openai_client",
        "peekOfCode": "client = OpenAI(\n    base_url=\"https://openrouter.ai/api/v1\",\n    api_key=os.getenv(\"OPENROUTER_API_KEY\")\n)\ndef clean_json_block(raw):\n    \"\"\"\n    Elimina los bloques tipo ```json ... ``` y deja solo el JSON.\n    \"\"\"\n    cleaned = re.sub(r\"^```json\", \"\", raw.strip())\n    cleaned = re.sub(r\"```$\", \"\", cleaned.strip())",
        "detail": "cvapp.utils.openai_client",
        "documentation": {}
    },
    {
        "label": "generate_pdf",
        "kind": 2,
        "importPath": "cvapp.utils.pdf_generator",
        "description": "cvapp.utils.pdf_generator",
        "peekOfCode": "def generate_pdf(data):\n    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=\".pdf\")\n    doc = SimpleDocTemplate(temp_file.name, pagesize=LETTER)\n    styles = getSampleStyleSheet()\n    elements = []\n    # Section helper\n    def add_section(title, items):\n        elements.append(Spacer(1, 12))\n        elements.append(Paragraph(f\"<b>{title}</b>\", styles['Heading2']))\n        elements.append(Spacer(1, 6))",
        "detail": "cvapp.utils.pdf_generator",
        "documentation": {}
    },
    {
        "label": "extract_text_from_pdf",
        "kind": 2,
        "importPath": "cvapp.utils.pdf_parser",
        "description": "cvapp.utils.pdf_parser",
        "peekOfCode": "def extract_text_from_pdf(file):\n    try:\n        # Primero intentamos extraer texto directamente con PyMuPDF\n        doc = fitz.open(stream=file.read(), filetype=\"pdf\")\n        text = \"\"\n        for page in doc:\n            text += page.get_text()\n        doc.close()\n        if text.strip():\n            return text",
        "detail": "cvapp.utils.pdf_parser",
        "documentation": {}
    },
    {
        "label": "CvappConfig",
        "kind": 6,
        "importPath": "cvapp.apps",
        "description": "cvapp.apps",
        "peekOfCode": "class CvappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'cvapp'",
        "detail": "cvapp.apps",
        "documentation": {}
    },
    {
        "label": "CVUploadForm",
        "kind": 6,
        "importPath": "cvapp.forms",
        "description": "cvapp.forms",
        "peekOfCode": "class CVUploadForm(forms.Form):\n    file = forms.FileField(label=\"Sub√≠ tu CV (PDF)\", required=True)",
        "detail": "cvapp.forms",
        "documentation": {}
    },
    {
        "label": "upload_cv",
        "kind": 2,
        "importPath": "cvapp.views",
        "description": "cvapp.views",
        "peekOfCode": "def upload_cv(request):\n    if request.method == 'POST':\n        form = CVUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            archivo = form.cleaned_data['file']\n            texto = pdf_parser.extract_text_from_pdf(archivo)\n            datos_estructurados = openai_client.structure_cv(texto)\n            ruta_pdf = pdf_generator.generate_pdf(datos_estructurados)\n            with open(ruta_pdf, 'rb') as f:\n                pdf_base64 = base64.b64encode(f.read()).decode('utf-8')",
        "detail": "cvapp.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "revolt_cv.asgi",
        "description": "revolt_cv.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "revolt_cv.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-)i$gv&=kd^6*uqp61nou2m&c_anzztw7+(l5q_6uh*2kjqqo+%'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-)i$gv&=kd^6*uqp61nou2m&c_anzztw7+(l5q_6uh*2kjqqo+%'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'cvapp',",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'cvapp',\n]\nMIDDLEWARE = [",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'revolt_cv.urls'",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "ROOT_URLCONF = 'revolt_cv.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "WSGI_APPLICATION = 'revolt_cv.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "revolt_cv.settings",
        "description": "revolt_cv.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "revolt_cv.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "revolt_cv.urls",
        "description": "revolt_cv.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', upload_cv, name='upload_cv'),\n]",
        "detail": "revolt_cv.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "revolt_cv.wsgi",
        "description": "revolt_cv.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "revolt_cv.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'revolt_cv.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]